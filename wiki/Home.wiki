#summary One-sentence summary of this page.

= Introduction =

Future Eye

[http://picasaweb.google.com/lh/photo/raIMQfeKFQmeMQTkvlBPgQ?feat=directlink&ss=a.png]

= Details =

{{{
package edu.uta.futureye.test;

import java.util.HashMap;

import edu.uta.futureye.algebra.Matrix;
import edu.uta.futureye.algebra.Solver;
import edu.uta.futureye.algebra.Vector;
import edu.uta.futureye.core.Assembler;
import edu.uta.futureye.core.DOF;
import edu.uta.futureye.core.Element;
import edu.uta.futureye.core.Mesh;
import edu.uta.futureye.core.Node;
import edu.uta.futureye.core.NodeType;
import edu.uta.futureye.core.WeakFormLaplace2D;
import edu.uta.futureye.function.Variable;
import edu.uta.futureye.function.basic.FAbstract;
import edu.uta.futureye.function.basic.FConstant;
import edu.uta.futureye.function.basic.FX;
import edu.uta.futureye.function.intf.Function;
import edu.uta.futureye.function.operator.FOBasic;
import edu.uta.futureye.function.shape.SFBilinearLocal2D;
import edu.uta.futureye.function.shape.SFLinearLocal2D;
import edu.uta.futureye.function.shape.SFSerendipity2D;
import edu.uta.futureye.io.MeshReader;
import edu.uta.futureye.io.MeshWriter;

public class LaplaceTest {
	
	public static void triangleTest() {
		MeshReader reader = new MeshReader("triangle.grd");
		Mesh mesh = reader.read2D();
		mesh.computeNodesBelongToElement();
		
		HashMap<NodeType, Function> mapNTF = new HashMap<NodeType, Function>();
		mapNTF.put(NodeType.Robin, new FAbstract("x","y"){
			@Override
			public double value(Variable v) {
				if(3.0-v.get("x")<0.01)
					return 1.0;
				else
					return -1.0;
			}
		});
		mapNTF.put(NodeType.Dirichlet, null);		
		mesh.markBorderNode(mapNTF);

		SFLinearLocal2D[] shapeFun = new SFLinearLocal2D[3];
		for(int i=0;i<3;i++)
			shapeFun[i] = new SFLinearLocal2D(i+1);
		
		//Asign degree of freedom to element
		for(int i=1;i<=mesh.getElementList().size();i++) {
			Element e = mesh.getElementList().at(i);
			for(int j=1;j<=e.nodes.size();j++) {
				//Asign shape function to DOF
				DOF dof = new DOF(j,e.nodes.at(j).globalIndex,shapeFun[j-1]);
				e.addDOF(j, dof);
			}
		}
		
		//User defined weak form of PDE (including bounder conditions)
		//-\Delta{u} = f
		//u(x,y)=0, (x,y)\in\partial{\Omega}
		//u=(x^2-9)*(y^2-9)
		//f=-2*(x^2+y^2)+36
		WeakFormLaplace2D weakForm = new WeakFormLaplace2D();
		weakForm.setF(
				FOBasic.Plus(
					FOBasic.Plus(
						FOBasic.Mult(new FConstant(-2.0), FOBasic.Mult(new FX("x"),new FX("x") )),
						FOBasic.Mult(new FConstant(-2.0), FOBasic.Mult(new FX("y"),new FX("y") ))
						),new FConstant(36.0)
					)
				);
		
		weakForm.setParam(
					null,
					null,
					FOBasic.Minus(
							FOBasic.Mult(new FConstant(6.0), 
							FOBasic.Mult(new FX("y"),new FX("y") )
							),
					new FConstant(54.0)),null //Robin: 6*y^2-54
				);
		
		Assembler assembler = new Assembler(mesh, weakForm);
		System.out.println("Begin Assemble...");
		Matrix stiff = assembler.getStiffnessMatrix();
		Vector load = assembler.getLoadVector();
		assembler.imposeDirichletCondition(new FConstant(0.0));
		System.out.println("Assemble done!");
		
		Solver solver = new Solver();
		Vector u = solver.solve(stiff, load);
	    System.out.println("u=");
	    for(int i=1;i<=u.getDim();i++)
	        System.out.println(String.format("%.3f", u.get(i)));	
	    
	    MeshWriter writer = new MeshWriter(mesh);
	    writer.writeTechplot("triangle2_out.dat", u);
		
	}
	
	public static void main(String[] args) {
		triangleTest();
	}
		
}
}}}